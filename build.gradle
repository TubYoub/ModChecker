plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
}

def targetMinecraftVersion = project.hasProperty('targetMinecraftVersion')
        ? project.getProperty('targetMinecraftVersion')
        : '1_21_6'

def getVersionProperty = { propertyName ->
    def specificProperty = "mc_${targetMinecraftVersion.replace('.', '_')}_${propertyName}"
    if (project.hasProperty(specificProperty)) {
        return project.getProperty(specificProperty)
    }
    throw new GradleException("Missing property: ${specificProperty} for target Minecraft version: ${targetMinecraftVersion}")
}

version = project.mod_version
group = project.maven_group
base {
    archivesName = "${project.archives_base_name}-${targetMinecraftVersion.replace('_', '.')}"
}

repositories {
    maven { url "https://maven.fabricmc.net/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${getVersionProperty('minecraft_version')}"
    mappings "net.fabricmc:yarn:${getVersionProperty('yarn_mappings')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${getVersionProperty('loader_version')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${getVersionProperty('fabric_version')}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", getVersionProperty('minecraft_version')
    inputs.property "loader_version", getVersionProperty('loader_version')
    inputs.property "mod_version", project.mod_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": getVersionProperty('minecraft_version'),
                "loader_version": getVersionProperty('loader_version'),
                "mod_version": project.mod_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}

tasks.register('buildAllMinecraftVersions') {
    group = 'build'
    description = 'Builds and smoke-tests every configured MC version'

    doLast {
        def minecraftVersions = []
        project.properties.each { k, v ->
            if (k.startsWith('mc_') && k.endsWith('_minecraft_version')) {
                minecraftVersions << k.substring(3, k.length() - '_minecraft_version'.length())
            }
        }
        if (minecraftVersions.isEmpty()) {
            logger.warn('No Minecraft versions configured.')
            return
        }

        minecraftVersions = minecraftVersions.sort(false) { a, b ->
            def ap = a.replace('_', '.').split('\\.')
            def bp = b.replace('_', '.').split('\\.')
            for (int i = 0; i < Math.min(ap.size(), bp.size()); i++) {
                int cmp = (ap[i] as Integer) <=> (bp[i] as Integer)
                if (cmp != 0) return cmp
            }
            ap.size() <=> bp.size()
        }

        def isWindows = System.getProperty('os.name').toLowerCase().contains('win')
        def gradlew = isWindows ? 'gradlew.bat' : './gradlew'

        minecraftVersions.each { mcVer ->
            def mcFriendly = mcVer.replace('_', '.')
            logger.lifecycle("=== Building $mcFriendly ===")

            // 1. build
            def build = new ProcessBuilder(gradlew, 'build', "-PtargetMinecraftVersion=$mcVer")
                    .directory(project.rootDir)
                    .redirectErrorStream(true)
                    .start()
            build.inputStream.eachLine { println it }
            if (build.waitFor() != 0) {
                throw new GradleException("Build failed for $mcFriendly")
            }

            // 2. smoke-test
            logger.lifecycle("=== Smoke-testing $mcFriendly ===")
            def run = new ProcessBuilder(
                    gradlew, 'runClient',
                    "-PtargetMinecraftVersion=$mcVer",
                    '--args=--quickPlayPath dummy'
            )
                    .directory(project.rootDir)
                    .redirectErrorStream(true)
                    .start()

            def success = false
            run.inputStream.eachLine { line ->
                println line
                if (line.contains('[ModChecker] Successfully changed client brand to:')) {
                    success = true
                    // force-close the client
                    run.descendants().forEach { it.destroy() }
                    run.destroy()
                }
            }
            run.waitFor()

            if (!success) {
                throw new GradleException("Smoke-test failed for $mcFriendly")
            }

            // 3. copy ONLY the jar that belongs to this MC version
            def outDir = file("${buildDir}/distributions/${mcFriendly}")
            outDir.mkdirs()

            def expectedJarName = "${archives_base_name}-${mcFriendly}-${mod_version}.jar"
            def jarFile = file("${buildDir}/libs/${expectedJarName}")
            if (!jarFile.exists()) {
                // fallback: pick the first jar we find
                jarFile = file("${buildDir}/libs").listFiles()?.find { it.name.endsWith('.jar') }
            }
            if (jarFile?.exists()) {
                copy {
                    from jarFile
                    into outDir
                    rename { expectedJarName }
                }
            }
            logger.lifecycle("=== $mcFriendly done ===")
        }
        logger.lifecycle('All versions built and tested successfully!')
    }
}