plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
}

def targetMinecraftVersion = project.hasProperty('targetMinecraftVersion') ? project.getProperty('targetMinecraftVersion') : '1_21_6'

def getVersionProperty = { propertyName ->
    def specificProperty = "mc_${targetMinecraftVersion.replace('.', '_')}_${propertyName}"
    if (project.hasProperty(specificProperty)) {
        return project.getProperty(specificProperty)
    }
    throw new GradleException("Missing property: ${specificProperty} for target Minecraft version: ${targetMinecraftVersion}")
}

version = project.mod_version
group = project.maven_group
base {
    archivesName = "${project.archives_base_name}-${targetMinecraftVersion.replace('_', '.')}"
}

repositories {
    maven {
        url "https://maven.fabricmc.net/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${getVersionProperty('minecraft_version')}"
    mappings "net.fabricmc:yarn:${getVersionProperty('yarn_mappings')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${getVersionProperty('loader_version')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${getVersionProperty('fabric_version')}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", getVersionProperty('minecraft_version')
    inputs.property "loader_version", getVersionProperty('loader_version')
    inputs.property "mod_version", project.mod_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": getVersionProperty('minecraft_version'),
                "loader_version": getVersionProperty('loader_version'),
                "mod_version" : project.mod_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}

tasks.register('buildAllMinecraftVersions') {
    group = "build"
    description = "Builds the mod for all configured Minecraft versions"

    doLast {
        def minecraftVersions = []
        project.properties.each { key, value ->
            if (key.startsWith('mc_') && key.endsWith('_minecraft_version')) {
                def versionId = key.substring(3, key.length() - '_minecraft_version'.length())
                minecraftVersions.add(versionId)
            }
        }

        if (minecraftVersions.isEmpty()) {
            logger.warn("No Minecraft versions configured in gradle.properties starting with 'mc_'.")
            return
        }

        logger.lifecycle("Building for Minecraft versions: ${minecraftVersions.collect { it.replace('_', '.') }.join(', ')}")

        def isWindows = System.getProperty("os.name").toLowerCase().contains("win")
        def gradlewCommand = isWindows ? "gradlew.bat" : "./gradlew"

        minecraftVersions.each { mcVer ->
            logger.lifecycle("Building for Minecraft ${mcVer.replace('_', '.')}")
            // Ensure all elements are explicitly strings
            def commandLine = [
                gradlewCommand,
                "clean",
                "build",
                "-PtargetMinecraftVersion=${mcVer}",
                "--refresh-dependencies"
            ].collect { it.toString() } // Explicitly convert each element to string

            def processBuilder = new ProcessBuilder(commandLine)
                    .directory(project.rootDir)
                    .redirectErrorStream(true)

            // Set JAVA_HOME in the environment
            // This is crucial for ProcessBuilder when launching another Java process
            def javaHome = System.getenv("JAVA_HOME")
            if (javaHome) {
                processBuilder.environment().put("JAVA_HOME", javaHome)
            } else {
                logger.warn("JAVA_HOME environment variable is not set. This might cause issues for subprocesses.")
            }


            def process = processBuilder.start()
            process.inputStream.eachLine { println it }

            if (process.waitFor() != 0) {
                logger.error("Build failed for Minecraft ${mcVer.replace('_', '.')}")
                throw new GradleException("Build failed for Minecraft ${mcVer.replace('_', '.')}")
            }
            logger.lifecycle("Successfully built for Minecraft ${mcVer.replace('_', '.')}")
        }
    }
}